## Notes from reading Practical Vim

### Chapter 1 : The Vim Way

* The Dot Formula
* One keystroke to move, one to execute

### Chapter 2 : Normal Mode

* `daw` is more composable than `bdw` and `dbx`
* `<C-a>` and `<C-x>` can be used to do simple arithmetic 
* Operator + Motion = Action : Page 25 for all operators.


### Chapter 3 : Insert Mode

* `C-h`, `C-w` and `C-u` for deleting char, word and line
* `C-o` is Insert Normal mode where u can fire a single command
* `<C-o>zz` allows you to center the line on the screen visually
* We can press `<C-r>0` to paste the text that we just yanked at the current cursor position
* `<C-r>=` allows you to perform simple calculations

### Chapter 4 : Visual Mode

* `V` for linewise visual mode
* `o` for changing the free end of the cursor
* Not directly related, but `gU{motoion}` uppercases the {motion} text uppercase
* `Vr{char}` is a good way to select a line and replace all characters with {char}
* `I` and `A` are your friends when editing ragged visual blocks

### Chapter 5 : Commandline mode

* `:3d` is a an Ex command that is faster than its normal mode equivalent `3Gdd`
* Some ways to specify ranges : `:{start},{end}`, `%` (stands for entire file), `.` (current file)
* `:'<,'>` is pre-populated when we press the `:` key after a visual selection.
* The `'<` symbol is a mark standing for the first line of the visual selection, while `'>` stands for the last line of the visual selection
* Vim also accepts a pattern as an address for an Ex command. For example: `:/<html>/,/<\/html>/p`
* General form of the offset: `:{address}+n`, for e.g. `:/<html>/+1,/<\/html>/-1p`
* Ranges summarised on page 60
* General syntax of copy is `:[range]t {address}`
* General syntax of move is `:[range]m {address}`
* At Vimâ€™s command line, the `<C-r><C-w>` mapping copies the word under the cursor and inserts it at the command-line prompt. Useful for find operations.
